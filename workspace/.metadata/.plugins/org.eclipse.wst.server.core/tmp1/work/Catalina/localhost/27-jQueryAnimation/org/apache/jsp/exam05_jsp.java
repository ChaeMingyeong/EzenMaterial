/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.40
 * Generated at: 2019-08-06 07:57:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class exam05_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script type=\"text/javascript\" src=\"js/jquery-3.4.1.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("   $(function(){\r\n");
      out.write("\t   $(\"a.item:eq(0)\").click(function(){\r\n");
      out.write("\t\t\tvar image = $(this).attr(\"href\");\r\n");
      out.write("\t\t\t$(\"#view\").hide(500, function(){\r\n");
      out.write("\t\t\t\t$(\"#view img\").attr(\"src\", image);\r\n");
      out.write("\t\t\t\t$(\"#view\").show(300);\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("\t\t$(\"a.item:eq(1)\").click(function(){\r\n");
      out.write("\t\t\tvar image = $(this).attr(\"href\");\r\n");
      out.write("\t\t\t$(\"#view\").fadeOut(500, function(){\r\n");
      out.write("\t\t\t\t$(\"#view img\").attr(\"src\", image);\r\n");
      out.write("\t\t\t\t$(\"#view\").fadeIn(300);\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("\t\t$(\"a.item:eq(2)\").click(function(){\r\n");
      out.write("\t\t\tvar image = $(this).attr(\"href\");\r\n");
      out.write("\t\t\t$(\"#view\").slideUp(500, function(){\r\n");
      out.write("\t\t\t\t$(\"#view img\").attr(\"src\", image);\r\n");
      out.write("\t\t\t\t$(\"#view\").slideDown(300);\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("   });\r\n");
      out.write("\t\t\r\n");
      out.write("\t\r\n");
      out.write("</script>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("/*목록태그 초기화 및 박스 왼쪽 배치*/\r\n");
      out.write("ul#thumb {\r\n");
      out.write("\tpadding: 0;\r\n");
      out.write("\tmargin: 0;\r\n");
      out.write("\tlist-style: none;\r\n");
      out.write("\twidth: 100px;\r\n");
      out.write("\tfloat: left;\r\n");
      out.write("}\r\n");
      out.write("/*목록의 개별 항목에 대한 여백처리*/\r\n");
      out.write("ul#thumb li {\r\n");
      out.write("\tpadding: 5px 10px;\r\n");
      out.write("}\r\n");
      out.write("/*썸네일 이미지 크기 지정*/\r\n");
      out.write("ul#thumb img {\r\n");
      out.write("\twidth: 80px;\r\n");
      out.write("\theight: 80px;\r\n");
      out.write("}\r\n");
      out.write("/*큰 이미지 크기 지정*/\r\n");
      out.write("#view {\r\n");
      out.write("\twidth: 360px;\r\n");
      out.write("\theight: 270px;\r\n");
      out.write("\tpadding: 5px 0;\r\n");
      out.write("\tfloat: left;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#view img {\r\n");
      out.write("\twidth: 100%;\r\n");
      out.write("\theight: 100%;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<!-- 썸네일 영역 지정 -->\r\n");
      out.write("\t<ul id=\"thumb\">\r\n");
      out.write("\t\t<li><a href=\"img/1.jpg\" class=\"item\"><img alt=\"이미지\" \r\n");
      out.write("\t\t\t\tsrc=\"img/1.jpg\"></a></li>\r\n");
      out.write("\t\t<li><a href=\"img/2.jpg\" class=\"item\"><img alt=\"이미지\" \r\n");
      out.write("\t\t\t\tsrc=\"img/2.jpg\"></a></li>\r\n");
      out.write("\t\t<li><a href=\"img/3.jpg\" class=\"item\"><img alt=\"이미지\" \r\n");
      out.write("\t\t\t\tsrc=\"img/3.jpg\"></a></li>\r\n");
      out.write("\t</ul>\r\n");
      out.write("\t<!-- 큰 이미지 영역 -->\r\n");
      out.write("\t<div id=\"view\">\r\n");
      out.write("\t\t<img src=\"img/1.jpg\">\r\n");
      out.write("\t</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
