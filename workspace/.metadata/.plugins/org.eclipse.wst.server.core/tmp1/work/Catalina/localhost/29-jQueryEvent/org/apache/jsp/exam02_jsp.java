/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.40
 * Generated at: 2019-08-08 08:38:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class exam02_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("  /*모든 태그 초기화*/\r\n");
      out.write("  *{\r\n");
      out.write("  /*여백이 사라지고 글자색은 진한 회색*/\r\n");
      out.write("    padding: 0;\r\n");
      out.write("    margin: 0;\r\n");
      out.write("    color: #333; \r\n");
      out.write("      }\r\n");
      out.write("      \r\n");
      out.write("  ul{list-style: none;}\r\n");
      out.write("  #container{\r\n");
      out.write("  /*안쪽여백*/\r\n");
      out.write("   padding: 30px 20px;\r\n");
      out.write("  }\r\n");
      out.write("  h1{ /*h1은 전체의 제목역할*/\r\n");
      out.write("   \r\n");
      out.write("     font-size: large;\r\n");
      out.write("     border-left: 10px solid #7baeb5;\r\n");
      out.write("     border-bottom: 1px solid #7baeb5;\r\n");
      out.write("     padding: 10px;\r\n");
      out.write("     width: auto;\r\n");
      out.write("  }\r\n");
      out.write("  #comment_write{\r\n");
      out.write("     padding: 20px 15px;\r\n");
      out.write("     border-bottom: 1px solid #7baeb5;\r\n");
      out.write("  }\r\n");
      out.write("  #comment_write label{\r\n");
      out.write("    /*줄간격 맞추기*/\r\n");
      out.write("     display: inline-block;\r\n");
      out.write("     width: 80px; /*간격!*/\r\n");
      out.write("     font-size: 14px;\r\n");
      out.write("     font-weight: bold;\r\n");
      out.write("     margin-bottom: 10px;\r\n");
      out.write("  }\r\n");
      out.write("  #comment_write input[type='text'], #comment{\r\n");
      out.write("     border: 1px solid #ccc;\r\n");
      out.write("     vertical-align: middle;\r\n");
      out.write("     padding: 3px 10px;\r\n");
      out.write("     font-size: 12px;\r\n");
      out.write("     line-height: 150%;\r\n");
      out.write("  }\r\n");
      out.write("  \r\n");
      out.write("  textarea#comment {\r\n");
      out.write("\t  width: 380px;\r\n");
      out.write("\t  height: 90px;\r\n");
      out.write("  }\r\n");
      out.write("  \r\n");
      out.write("  /*--jQuery로 제어할 동적인 태그---*/\r\n");
      out.write("  .comment_item{\r\n");
      out.write("      font-size: 13px;\r\n");
      out.write("      color: #333;\r\n");
      out.write("      padding: 15px;\r\n");
      out.write("      border-bottom: 1px dotted #ccc;\r\n");
      out.write("      line-height: 150%;\r\n");
      out.write("  }\r\n");
      out.write("  .comment_item .writer{\r\n");
      out.write("     color: #555;\r\n");
      out.write("     line-height: 200%;\r\n");
      out.write("  }\r\n");
      out.write("  .comment_item .writer input{\r\n");
      out.write("     vertical-align: middle;\r\n");
      out.write("  }\r\n");
      out.write("  .comment_item .writer .name{\r\n");
      out.write("     color: #222;\r\n");
      out.write("     font-weight: bold;\r\n");
      out.write("     font-size: 14px;\r\n");
      out.write("  }\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\" src=\"js/jquery-3.4.1.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("   $(function(){\r\n");
      out.write("\t    //저장하기 버튼 클릭 : submit 이벤트\r\n");
      out.write("\t    $(\"#comment_form\").submit(function(){\r\n");
      out.write("\t    \t//입력검사 \r\n");
      out.write("\t    \tif(!$(\"#user_name\").val()){\r\n");
      out.write("\t    \t\talert(\"이름을 입력하세요.\");\r\n");
      out.write("\t    \t\t$(\"#user_name\").focus();\r\n");
      out.write("\t    \t\treturn false;\r\n");
      out.write("\t    \t}\r\n");
      out.write("\t    \tif(!$(\"#comment\").val()){\r\n");
      out.write("\t    \t\talert(\"내용을 입력하세요.\");\r\n");
      out.write("\t    \t\t$(\"#comment\").focus();\r\n");
      out.write("\t    \t\treturn false;\r\n");
      out.write("\t    \t}\r\n");
      out.write("\t    \r\n");
      out.write("\t    \t//작성일시 만들기\r\n");
      out.write("\t    \tvar date =new Date(); //자바스크립트에서 제공되는 객체\r\n");
      out.write("\t    \tvar yy= date.getFullYear();\r\n");
      out.write("\t    \tvar mm= date.getMonth() + 1;\r\n");
      out.write("\t    \tvar dd= date.getDate();\r\n");
      out.write("\t    \tvar hh= date.getHours();\r\n");
      out.write("\t    \tvar mi= date.getMinutes();\r\n");
      out.write("\t    \tvar ss= date.getSeconds();\r\n");
      out.write("\t    \t//자리수 보정\r\n");
      out.write("\t    \tif(mm < 10) mm=\"0\" + mm; \r\n");
      out.write("\t    \tif(dd < 10) dd=\"0\" + dd; \r\n");
      out.write("\t    \tif(hh < 10) hh=\"0\" + hh; \r\n");
      out.write("\t    \tif(mi < 10) mi=\"0\" + mi; \r\n");
      out.write("\t    \tif(ss < 10) ss=\"0\" + ss; \r\n");
      out.write("\t    \t\r\n");
      out.write("\t    \tvar today = yy+ \"-\" + mm + \"-\" + dd + \"-\"\r\n");
      out.write("\t    \t          + hh+ \":\" + mi + \":\" + ss;\r\n");
      out.write("\t    \t\r\n");
      out.write("\t    \t//새로운 글이 추가될 때 사용될 li 태그 생성\r\n");
      out.write("\t    \tvar new_li = $(\"<li>\");\r\n");
      out.write("\t    \tnew_li.addClass(\"comment_item\");\r\n");
      out.write("\t    \t// 작성자 정보가 지정될 <p> 태그\r\n");
      out.write("\t    \tvar writer_p = $(\"<p>\");\r\n");
      out.write("\t    \twriter_p.addClass(\"writer\");\r\n");
      out.write("\t    \t// 작성자 정보의 이름이 지정될 <span> 태그\r\n");
      out.write("\t    \tvar name_span = $(\"<span>\");\r\n");
      out.write("\t    \tname_span.addClass(\"name\");\r\n");
      out.write("\t    \tname_span.html($(\"#user_name\").val() +\"님\"); //아이디가 user_name인 input태그 값얻어와서 출력시킴\r\n");
      out.write("\t        //작성일시를 표시할 <span>태그\r\n");
      out.write("\t        var date_span = $(\"<span>\");\r\n");
      out.write("\t        date_span.html(\" / \" + today + \" \");\r\n");
      out.write("\t        //삭제하기 버튼용 <input> 태그\r\n");
      out.write("\t        var del_input = $(\"<input>\");\r\n");
      out.write("\t        del_input.attr({ //input태그의 속성값이 여러개이므로 json형태로)\r\n");
      out.write("\t        \t\"type\" : \"button\",\r\n");
      out.write("\t            \"value\" : \"삭제하기\"\r\n");
      out.write("\t        });\r\n");
      out.write("            del_input.addClass(\"delete_btn\");\r\n");
      out.write("            //내용을 표시할 <p>태그\r\n");
      out.write("            var content_p = $(\"<p>\");\r\n");
      out.write("            content_p.html($(\"#comment\").val());\r\n");
      out.write("            /*조립하기*/\r\n");
      out.write("            //첫번째줄 <p>태그에 이름, 날짜, 버튼 추가 \r\n");
      out.write("            writer_p.append(name_span).append(date_span).append(del_input);\r\n");
      out.write("            //<li>태그에 <p>태그 두 개 추가\r\n");
      out.write("            new_li.append(writer_p).append(content_p);\r\n");
      out.write("            //<ul>태그에 <li>태그 추가\r\n");
      out.write("            $(\"ul#comment_list\").append(new_li);\r\n");
      out.write("            \r\n");
      out.write("            //입력내용지우기 \r\n");
      out.write("            $(\"#user_name\").val(\"\");\r\n");
      out.write("            $(\"#comment\").val(\"\");\r\n");
      out.write("            return false;\r\n");
      out.write("\t    });\r\n");
      out.write("        //삭제버튼 클릭시의 동작을 미리 지정 \r\n");
      out.write("\t    $(document).on(\"click\", \".delete_btn\", function() {\r\n");
      out.write("\t\t\tif(confirm(\"정말 선택하신 항목을 삭제하시겠습니까?\")){\r\n");
      out.write("\t\t\t  $(this).parents(\".comment_item\").remove();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t    });\r\n");
      out.write("   });\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div id=\"container\">\r\n");
      out.write("   <h1>jQuery Comment</h1>\r\n");
      out.write("   <div id=\"comment_write\">\r\n");
      out.write("     <form action=\"\" id=\"comment_form\">\r\n");
      out.write("       <div>\r\n");
      out.write("         <label for=\"user_name\">작성자</label>\r\n");
      out.write("         <input type=\"text\" name=\"user_name\" id=\"user_name\">\r\n");
      out.write("         <input type=\"submit\" value=\"저장하기\">\r\n");
      out.write("       </div>\r\n");
      out.write("       <div>\r\n");
      out.write("         <label for=\"\">덧글 내용</label>\r\n");
      out.write("         <textarea name=\"comment\" id=\"comment\"></textarea>\r\n");
      out.write("       </div>\r\n");
      out.write("     </form>\r\n");
      out.write("   </div>\r\n");
      out.write("   <!-- 덧글 목록 -->\r\n");
      out.write("   <ul id=\"comment_list\">\r\n");
      out.write("     <!-- 여기에 동적 생성 요소가 들어가게 됩니다. -->\r\n");
      out.write("   </ul>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
