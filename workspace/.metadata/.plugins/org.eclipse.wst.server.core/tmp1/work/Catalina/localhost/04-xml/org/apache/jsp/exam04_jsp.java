/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.40
 * Generated at: 2019-08-09 09:09:15 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class exam04_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("* {\r\n");
      out.write("        padding: 0;\r\n");
      out.write("        margin: 0;\r\n");
      out.write("        color: #333;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("body {\r\n");
      out.write("        padding: 20px 30px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/*form 영역의 크기 및 테두리 */\r\n");
      out.write("#login fieldset {\r\n");
      out.write("        width: 270px;\r\n");
      out.write("        padding: 15px;\r\n");
      out.write("        border: 1px solid #7BAEB5;\r\n");
      out.write("        position: relative;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#login legend {\r\n");
      out.write("        display: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/*입력항목 설정 */\r\n");
      out.write("#login label {\r\n");
      out.write("        display: inline-block;\r\n");
      out.write("        width: 80px;\r\n");
      out.write("        font-size: 14px;\r\n");
      out.write("        font-weight: bold;\r\n");
      out.write("        padding-left: 10px;\r\n");
      out.write("        margin-bottom: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#login input[type='text'], input[type='password'] {\r\n");
      out.write("        border: 1px solid #ccc;\r\n");
      out.write("        padding: 3px 10px;\r\n");
      out.write("        width: 150px;\r\n");
      out.write("        vertical-align: middle;\r\n");
      out.write("        font-size: 12px;\r\n");
      out.write("        line-height: 150%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/*버튼 크기 지정 */\r\n");
      out.write("#login input[type='submit'] {\r\n");
      out.write("        width: 270px;\r\n");
      out.write("        height: 20px;\r\n");
      out.write("}\r\n");
      out.write("/*활성화input에 적용할스타일*/\r\n");
      out.write("#login fieldset .loader {\r\n");
      out.write("        position: absolute;\r\n");
      out.write("        left: 0;\r\n");
      out.write("        top: 0;\r\n");
      out.write("        width: 100%;\r\n");
      out.write("        height: 100%;\r\n");
      out.write("        background: rgba(0, 0, 0, 0.3);\r\n");
      out.write("        display: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 활성화 input에 적용할 스타일 */\r\n");
      out.write(".active {\r\n");
      out.write("        border: 1px solid #f00;\r\n");
      out.write("        background: #98bf21;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/*이미지를 로딩 박스 한 가운데 배치하기*/\r\n");
      out.write("#login .loader img {\r\n");
      out.write("        position: absolute;\r\n");
      out.write("        left: 50%;\r\n");
      out.write("        top: 50%;\r\n");
      out.write("        margin-left: -5px;\r\n");
      out.write("        margin-top: -5px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\" src=\"js/jquery-3.4.1.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("  $(function() {\r\n");
      out.write("    // #user_name과 #user_password에 대한 focus, blur 이벤트 처리\r\n");
      out.write("    $(\"#user_name, #user_password\").bind({\r\n");
      out.write("      \"focus\": function() {\r\n");
      out.write("        $(this).addClass(\"active\");\r\n");
      out.write("      },\r\n");
      out.write("      \"blur\": function() {\r\n");
      out.write("        $(this).removeClass(\"active\");\r\n");
      out.write("      }\r\n");
      out.write("    });\r\n");
      out.write("    // 폼에대한 submit 이벤트 처리 -> 입력값 여부 검사\r\n");
      out.write("    $(\"#login\").bind(\"submit\", function(){\r\n");
      out.write("      // 입력값 검사\r\n");
      out.write("      if(!$(\"#user_name\").val()){\r\n");
      out.write("        alert(\"아이디를 입력하세요\");\r\n");
      out.write("        $(\"#user_name\").focus();\r\n");
      out.write("        return false;\r\n");
      out.write("      }\r\n");
      out.write("      if(!$(\"#user_password\").val()){\r\n");
      out.write("        alert(\"비밀번호를 입력하세요\");\r\n");
      out.write("        $(\"#user_password\").focus();\r\n");
      out.write("        return false;\r\n");
      out.write("      }\r\n");
      out.write("      //로딩바 보여주기\r\n");
      out.write("      $(\"#login .loader\").show();\r\n");
      out.write("      //Ajax로그인처리\r\n");
      out.write("      var url =\"ajax/login/login.jsp\";\r\n");
      out.write("      var ajax = $.post(url, $(this).serialize(), function(data){\r\n");
      out.write("    \t//보낼 데이터는 유저아이디와 패스워드인데 폼태그 안에 있으므로 따로 파라미터로 전달할 필요 x\r\n");
      out.write("          var result_value = $(data).find(\"result\").text();\r\n");
      out.write("          var message = $(data).find(\"message\").text();\r\n");
      out.write("          var result = eval(result_value);\r\n");
      out.write("          //결과 메세지 출력\r\n");
      out.write("          alert(message);   \r\n");
      out.write("    \t  if(result){\r\n");
      out.write("    \t\t  // 로그인 성공시 처리할 부분  \r\n");
      out.write("    \t\t  alert(\"성공\");\r\n");
      out.write("    \t  }else{\r\n");
      out.write("    \t\t  //로그인 실패시 처리할 부분 \r\n");
      out.write("    \t\t  alert(\"실패\");\r\n");
      out.write("    \t  }\r\n");
      out.write("      }).fail(function(){\r\n");
      out.write("    \t  alert(\"통신실패, 잠시후에 다시 시도해주세요.\");\r\n");
      out.write("      });\r\n");
      out.write("       return false; //submit에서 화면제출되는 동작방지 \r\n");
      out.write("    });\r\n");
      out.write("  });\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("        <form action=\"\" id=\"login\">\r\n");
      out.write("                <fieldset>\r\n");
      out.write("                        <legend>로그인</legend>\r\n");
      out.write("                        <div>\r\n");
      out.write("                                <label for=\"user_name\">아이디</label>\r\n");
      out.write("                                <input type=\"text\" name=\"user_name\" id=\"user_name\">\r\n");
      out.write("                        </div>\r\n");
      out.write("                        <div>\r\n");
      out.write("                                <label for=\"user_password\">비밀번호</label>\r\n");
      out.write("                                <input type=\"password\" name=\"user_password\" id=\"user_password\">\r\n");
      out.write("                        </div>\r\n");
      out.write("                        <div>\r\n");
      out.write("                                <input type=\"submit\" value=\"로그인\">\r\n");
      out.write("                        </div>\r\n");
      out.write("                        <div class=\"loader\">\r\n");
      out.write("                                <img src=\"img/loader.gif\">\r\n");
      out.write("                        </div>\r\n");
      out.write("                </fieldset>\r\n");
      out.write("        </form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
