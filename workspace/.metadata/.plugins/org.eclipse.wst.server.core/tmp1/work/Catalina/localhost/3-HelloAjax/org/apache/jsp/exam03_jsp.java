/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.40
 * Generated at: 2019-08-09 03:12:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class exam03_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"css/reset.css\">\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"css/common.css\">\r\n");
      out.write("<script type=\"text/javascript\" src=\"js/jquery-3.4.1.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("   $(function(){\r\n");
      out.write("\t   //기본적으로 1dept의 드롭다운을 로드함 \r\n");
      out.write("\t   $(\"#category1\").load(\"ajax/text/category-data.html #category1-1\", function(){\r\n");
      out.write("\t\t   $(this).show();\r\n");
      out.write("\t   });\r\n");
      out.write("\t   // 드롭다운은 body상에 없으므로 이벤트를 \"미리\" 정의해놓아야한다.\r\n");
      out.write("\t   // 1dept에 대한 change 이벤트 정의\t//on.(이벤트,태그, 동작)\r\n");
      out.write("\t   $(document).on(\"change\", \"#category1 > select\", function(){\r\n");
      out.write("\t\t   //1depth가 변경되는 것이므로 2/3depth는 초기화 , 비우고 감추기 \r\n");
      out.write("\t\t   $(\"#category2\").empty().hide();\r\n");
      out.write("\t\t   $(\"#category3\").empty().hide();\r\n");
      out.write("\t\t   //선택한 항목이 지시하는 하위 카테고리 페이지의 URL얻기 \r\n");
      out.write("\t\t   var target = $(this).find(\"option:selected\").attr(\"data-target\");\r\n");
      out.write("\t\t   var selector = \"ajax/text/category-data.html \" + target;\r\n");
      out.write("\t\t   //다음항목로드              //.load(url, 성공했을때 함수)\r\n");
      out.write("\t\t   $(\"#category2\").load(selector, function(){\r\n");
      out.write("\t\t\t   $(this).show();\r\n");
      out.write("\t\t   });\r\n");
      out.write("\t   });\r\n");
      out.write("\t   // 2dept에 대한 change 이벤트 정의\r\n");
      out.write("\t   $(document).on(\"change\", \"#category2 > select\", function(){\r\n");
      out.write("\t\t   //2dept가 변경되므로 3dept는 초기화 \r\n");
      out.write("\t\t   $(\"category3\").empty().hide();\r\n");
      out.write("\t\t   //선택한 항목이 지시하는 하위 카테고리 페이지의 URL얻기 \r\n");
      out.write("\t\t   var target = $(this).find(\"option:selected\").attr(\"data-target\");\r\n");
      out.write("\t\t   var selector = \"ajax/text/category-data.html \" + target;\r\n");
      out.write("\t\t   //다음항목로드                                  \r\n");
      out.write("\t\t   $(\"#category3\").load(selector, function(){\r\n");
      out.write("\t\t\t   $(this).show();\r\n");
      out.write("\t\t   });\r\n");
      out.write("\t   });\r\n");
      out.write("\t   // 3dept에 대한 change 이벤트 정의\r\n");
      out.write("\t   $(document).on(\"change\", \"#category3 > select\", function(){\r\n");
      out.write("\t\t   //선택항목이 존재하는 지 검사\r\n");
      out.write("\t\t   if($(this).find(\"option:selected\").index()>0){\r\n");
      out.write("\t\t\t   //모든 드롭다운의 선택값을 추출\r\n");
      out.write("\t\t\t   var data1 = $(\"#category1 > select > option:selected\").val();\r\n");
      out.write("\t\t\t   var data2 = $(\"#category2 > select > option:selected\").val();\r\n");
      out.write("\t\t\t   var data3 = $(\"#category3 > select > option:selected\").val();\r\n");
      out.write("\t\t\t   \r\n");
      out.write("\t\t\t   $(\".console\").html(data1 + \" &gt; \" +data2 +\" &gt; \" + data3);\r\n");
      out.write("\t\t   }\r\n");
      out.write("\t   });\r\n");
      out.write("   });\r\n");
      out.write("</script>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("/* 빈 요소를 숨김. 각 span 안에 드롭다운을 출력하게 됨 */\r\n");
      out.write("form > span{\r\n");
      out.write("  display: none;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h1 class=\"title\">동적 드롭다운</h1>\r\n");
      out.write("<div class=\"exec\">\r\n");
      out.write("   <form action=\"\">\r\n");
      out.write("      <!-- 각 단계별 dropdown을 표시할 span 태그 -->\r\n");
      out.write("      <span id=\"category1\"></span>\r\n");
      out.write("      <span id=\"category2\"></span>\r\n");
      out.write("      <span id=\"category3\"></span>\r\n");
      out.write("   </form>\r\n");
      out.write("</div>\r\n");
      out.write("<!-- 결과출력 -->\r\n");
      out.write("<div class=\"console\"></div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
