/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.40
 * Generated at: 2019-08-12 03:52:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class exam05_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("  *{\r\n");
      out.write("    padding: 0;\r\n");
      out.write("    margin: 0;\r\n");
      out.write("    color: #333;\r\n");
      out.write("  }\r\n");
      out.write(" \r\n");
      out.write("  ul{\r\n");
      out.write("    list-style: none;\r\n");
      out.write("  }\r\n");
      out.write("  \r\n");
      out.write("  #container{\r\n");
      out.write("    padding: 30px 20px;\r\n");
      out.write("  }\r\n");
      out.write("  \r\n");
      out.write("  h1{\r\n");
      out.write("    font-size: large;\r\n");
      out.write("    border-left: 10px solid #7BAEB5;\r\n");
      out.write("    border-bottom: 1px solid #7BAEB5;\r\n");
      out.write("    padding: 10px;\r\n");
      out.write("    width: auto;\r\n");
      out.write("  }\r\n");
      out.write("  \r\n");
      out.write("  div#comment_write{\r\n");
      out.write("    padding: 20px 15px;\r\n");
      out.write("    border-bottom: 1px solid #7BAEB5;\r\n");
      out.write("  }\r\n");
      out.write("  \r\n");
      out.write("  div#comment_write label{\r\n");
      out.write("   /* 줄 맞추기 => label이 inline 속성이기 때문에 \r\n");
      out.write("    inline_block으로   바꿔서 줄맞춰줌*/\r\n");
      out.write("    display: inline-block;\r\n");
      out.write("    width: 80px;\r\n");
      out.write("    font-size: 14px;\r\n");
      out.write("    font-weight: bold;\r\n");
      out.write("    margin-bottom: 10px;\r\n");
      out.write("  }\r\n");
      out.write("  input[name='user_name'], textarea[name='comment']{\r\n");
      out.write("    border: 1px solid #ccc;\r\n");
      out.write("    vertical-align: middle;\r\n");
      out.write("    padding: 3px 10px;\r\n");
      out.write("    font-size: 12px;\r\n");
      out.write("    line-height: 150%;\r\n");
      out.write("  }\r\n");
      out.write("  textarea[name='comment'] {\r\n");
      out.write("\twidth: 380px;\r\n");
      out.write("\theight: 90px;\r\n");
      out.write("  }\r\n");
      out.write("  /* 앞으로 생성될 태그의 css 설정*/\r\n");
      out.write("  .comment_item{\r\n");
      out.write("    font-size: 13px;\r\n");
      out.write("    color: #333;\r\n");
      out.write("    padding: 15px;\r\n");
      out.write("    border-bottom: 1px dotted #ccc;\r\n");
      out.write("    line-height: 150%;\r\n");
      out.write("  }\r\n");
      out.write("  .comment_item . writer{\r\n");
      out.write("    color: #555;\r\n");
      out.write("    line-height: 200%;\r\n");
      out.write("  }\r\n");
      out.write("  .comment_item .writer input{\r\n");
      out.write("    vertical-align: middle;\r\n");
      out.write("  }\r\n");
      out.write("  .comment_item . writer .name{\r\n");
      out.write("     color: #222;\r\n");
      out.write("     font-weight: bold;\r\n");
      out.write("     font-size: 14px;\r\n");
      out.write("  }\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\" src=\"js/jquery-3.4.1.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("  /* 새로운 화면에 글을 추가하기 위한 함수 */\r\n");
      out.write("  function addNewItem(num, writer, content, datetime){\r\n");
      out.write("\t //alert(\"num\" + num + \"\\n\" + \"writer\" + writer + \r\n");
      out.write("\t //\"\\n\" + \"content\" + content + \"\\n\" + \"datatime\" + datetime + \"\\n\");\r\n");
      out.write("\t  // 새로운 덧글이 추가될 li 태그\r\n");
      out.write("\t  var new_li = $(\"<li>\");\r\n");
      out.write("\t  new_li.attr(\"data_num\", num);\r\n");
      out.write("\t  new_li.addClass(\"comment_item\");\r\n");
      out.write("\t  //작성자 정보가 지정될 <p> 태그\r\n");
      out.write("\t  var writer_p = $(\"<p>\");\r\n");
      out.write("\t  writer_p.addClass(\"writer\"); //클래스 wr iter\r\n");
      out.write("\t  //작성자정보의 이름\r\n");
      out.write("\t  var name_span = $(\"<span>\");\r\n");
      out.write("\t  name_span.addClass(\"name\");\r\n");
      out.write("\t  name_span.html(writer + \"님\"); //매개변수로 전달된 writer\r\n");
      out.write("\t  //작성일시\r\n");
      out.write("\t  var date_span = $(\"<span>\");\r\n");
      out.write("\t  date_span.html(\" / \" + datetime + \" \");\r\n");
      out.write("\t  //삭제하기 버튼\r\n");
      out.write("\t  var del_input = $(\"<input>\");\r\n");
      out.write("\t  del_input.attr({\r\n");
      out.write("\t\t  \"type\" : \"button\",\r\n");
      out.write("\t\t  \"value\" : \"삭제하기\"\r\n");
      out.write("\t  });\r\n");
      out.write("\t  del_input.addClass(\"delete_btn\");\r\n");
      out.write("\t  //내용\r\n");
      out.write("\t  var content_p = $(\"<p>\");\r\n");
      out.write("\t  content_p.html(content);\r\n");
      out.write("\t  //조립하기\r\n");
      out.write("\t  writer_p.append(name_span).append(date_span).append(del_input);\r\n");
      out.write("\t  new_li.append(writer_p).append(content_p);\r\n");
      out.write("\t  $(\"#comment_list\").append(new_li);\r\n");
      out.write("  }\r\n");
      out.write("  \r\n");
      out.write("  $(function(){\r\n");
      out.write("\t  /* 기본 덧글 목록 불러오기 */ //url,보낼data,성공했을때동작될함수 (서버에서 넘어온 데이터를 매개변수로 받음 )\r\n");
      out.write("\t  $.get(\"ajax/comment/comment_list.xml\", {} , function(data){\r\n");
      out.write("\t\t  //읽어들인 XML에서 \"item\" 태그를 찾아 반복처리 \r\n");
      out.write("\t\t  $(data).find(\"item\").each(function(){ \r\n");
      out.write("\t\t\t  //부모태그는 parents(), 자식태그는 find()로 찾음 \r\n");
      out.write("\t\t\t  var num = $(this).find(\"num\").text();\r\n");
      out.write("\t\t\t  var writer = $(this).find(\"writer\").text();\r\n");
      out.write("\t\t\t  var content = $(this).find(\"content\").text();\r\n");
      out.write("\t\t\t  var datetime = $(this).find(\"datetime\").text();\r\n");
      out.write("\t\t\t  addNewItem(num, writer, content, datetime);\r\n");
      out.write("\t\t  });\r\n");
      out.write("\t  }).fail(function(){\r\n");
      out.write("\t\t  alert(\"덧글목록을 불러오는데 실패하였습니다. 잠시후 다시 시도해주세요\");\r\n");
      out.write("\t  });\r\n");
      out.write("\t  \r\n");
      out.write("\t  /* 덧글 내용 저장 이벤트 */\r\n");
      out.write("\t  $(\"#comment_form\").submit(function(){ //폼이 제출되어지면 \r\n");
      out.write("\t\t  //작성자 이름에 대한 입력 검사\r\n");
      out.write("\t\t  if(!$(\"#user_name\").val()){\r\n");
      out.write("\t\t\talert(\"이름을 입력하세요.\");\r\n");
      out.write("\t\t\t$(\"#user_name\").focus();\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t  }else if(!$(\"#comment\").val()){\r\n");
      out.write("\t\t\t\talert(\"내용을 입력하세요.\");\r\n");
      out.write("\t\t\t\t$(\"#comment\").focus();\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t  }\r\n");
      out.write("\t     // 글 저장을 위한  post방식의 Ajax 연동 처리 \r\n");
      out.write("\t      var url = \"ajax/comment/comment_write.jsp\";\r\n");
      out.write("\t      $.post(url, $(this).serialize(), function(data){\r\n");
      out.write("\t    \t  //alert(\"데이터가 서버에 전달되는지  test\");\r\n");
      out.write("\t    \t  //XML에서 \"result\" 태그의 값을 추출해서 식으로 변환\r\n");
      out.write("\t    \t  var result = eval($(data).find(\"result\").text()); //eval : 문자열을 데이터로 바꿈\r\n");
      out.write("\t    \t  alert(\"result = \" + result);\r\n");
      out.write("\t    \t  //결과가 저장실패를 의미한다면, 에러메시지 출력후 처리중단\r\n");
      out.write("\t    \t  if(!result){\r\n");
      out.write("\t    \t\t  alert($(data).find(\"message\").text());\r\n");
      out.write("\t    \t\t  return false;\r\n");
      out.write("\t    \t  }\r\n");
      out.write("\t    \t  //데이터 추출 \r\n");
      out.write("\t    \t  var num = $(data).find(\"num\").text();\r\n");
      out.write("\t    \t  var writer = $(data).find(\"writer\").text();\r\n");
      out.write("\t    \t  var content = $(data).find(\"content\").text();\r\n");
      out.write("\t    \t  var datetime = $(data).find(\"datetime\").text();\r\n");
      out.write("\t    \t  //alert(\"result\" + result + \"\\n\" + \"num\" + num + \"\\n\" + \"writer\" + writer + \r\n");
      out.write("\t    \t  //\"\\n\" + \"content\" + content + \"\\n\" + \"datatime\" + datetime + \"\\n\");\r\n");
      out.write("\t    \t  //함수 호출하여 li 태그 추가\r\n");
      out.write("\t    \t  addNewItem(num, writer, content, datetime);\r\n");
      out.write("\t      }).fail(function(){\r\n");
      out.write("\t\t\t  alert(\"덧글작성에 실패하였습니다. 잠시후 다시 시도해주세요\");\r\n");
      out.write("\t\t  });\r\n");
      out.write("\t      return false; //submit 방지용 \r\n");
      out.write("\t  });\r\n");
      out.write("\t  \r\n");
      out.write("\t  /* 삭제 버튼 클릭시에 항목 삭제하도록 미리 지정 */\r\n");
      out.write("\t  $(document).on(\"click\", \".delete_btn\", function(){\r\n");
      out.write("\t\t  if(confirm(\"선택하신 항목을 삭제하시겠습니까?\")){\r\n");
      out.write("\t\t\t  //덧글 삭제를 할 JSP 파일\r\n");
      out.write("\t\t\t  var url =\"ajax/comment/comment_delete.jsp\";\r\n");
      out.write("\t\t\t  //글번호 얻기\r\n");
      out.write("\t\t\t  var num = $(this).parents(\"li\").attr(\"data_num\");\r\n");
      out.write("\t\t\t  //alert(\"num = \" + num);\r\n");
      out.write("\t          //삭제 대상\r\n");
      out.write("\t          var target = $(this).parents(\".comment_item\"); //한줄데이터삭제 \r\n");
      out.write("\t          //글번호를 통하여 삭제를 요청      // url, 보낼데이터, 요청을 보낼때 응답이오면 data 받고 동작할 함수 \r\n");
      out.write("\t          $.post(url, {\"num\" : num}, function(data){\r\n");
      out.write("\t        \t  //result값 추출\r\n");
      out.write("\t        \t  var result = eval($(data).find(\"result\").text());\r\n");
      out.write("\t        \t  //결과 메세지\r\n");
      out.write("\t        \t  var message = $(data).find(\"message\").text();\r\n");
      out.write("\t        \t  //메세지 출력\r\n");
      out.write("\t        \t  alert(message);\r\n");
      out.write("\t        \t  //DB에서 데이터가 삭제되면, 해당 내용 삭제하기\r\n");
      out.write("\t        \t  if(result){\r\n");
      out.write("\t        \t\t  target.remove();\r\n");
      out.write("\t        \t  }\r\n");
      out.write("\t          }).fail(function(){\r\n");
      out.write("\t\t\t\t  alert(\"덧글삭제에 실패했습니다. 잠시후 다시 시도해주세요\");\r\n");
      out.write("\t\t\t  });\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t  });\r\n");
      out.write("  });\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div id=\"container\">\r\n");
      out.write("\t\t<h1>jQuery Comment</h1>\r\n");
      out.write("\t\t<div id=\"comment_write\">\r\n");
      out.write("\t\t <!-- action에 아무것도 안적으면 자기자신을 다시호출시킴  -->\r\n");
      out.write("\t\t\t<form action=\"\" id=\"comment_form\"> \r\n");
      out.write("\t\t\t\t<div>\r\n");
      out.write("\t\t\t\t\t<label for=\"user_name\">작성자</label>\r\n");
      out.write("\t\t\t\t\t<input type=\"text\" name=\"user_name\" id=\"user_name\"> \r\n");
      out.write("\t\t\t\t\t<input type=\"submit\" value=\"저장하기\">\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div>\r\n");
      out.write("\t\t\t\t\t<label for=\"comment\">덧글 내용</label>\r\n");
      out.write("\t\t\t\t\t<textarea name=\"comment\" id=\"comment\"></textarea>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</form>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<ul id=\"comment_list\">\r\n");
      out.write("\t\t\t<!-- 여기에 동적 생성 요소가 들어감 -->\r\n");
      out.write("\t\t</ul>\r\n");
      out.write("\t</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
