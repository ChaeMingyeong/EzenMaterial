/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.40
 * Generated at: 2019-08-06 08:11:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class exam04_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script type=\"text/javascript\" src=\"js/jquery-3.4.1.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("    $(function(){\r\n");
      out.write("    \t//링크를 클릭한 경우\r\n");
      out.write("    \t$(\"a.model\").click(function(){\r\n");
      out.write("    \t\t//배경 레이어를 화면에 표시\r\n");
      out.write("    \t\t$(\"#glayLayer\").fadeIn(300);\r\n");
      out.write("    \t\t//이미지레이어를 화면에 표시\r\n");
      out.write("    \t\t$(\"#overLayer\").fadeIn(300);\r\n");
      out.write("            //링크가 갖는 href 속성의 주소를 <img>태그에 설정하여\r\n");
      out.write("            //이미지 레이어에 출력한다.\r\n");
      out.write("            $(\"#overLayer\").html(\"<img src='\" + $(this).attr(\"href\") +\"'>\");\r\n");
      out.write("            //<a>태그의 링크페이지 이동중단 \r\n");
      out.write("            \r\n");
      out.write("    \t});\r\n");
      out.write("    \t// thumnail화면으로 돌아가기 : 배경 클릭 \r\n");
      out.write("    \t$(\"#overLayer\").click(function(){ //window\r\n");
      out.write("    \t\t//배경레이어 숨김 \r\n");
      out.write("    \t\t$(\"#glayLayer\").fadeOut(300);\r\n");
      out.write("    \t\t//이미지 레이어 숨김\r\n");
      out.write("    \t\t$(\"#overLayer\").fadeOut(300);\r\n");
      out.write("    \t});\r\n");
      out.write("    });\r\n");
      out.write("</script>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("  ul{\r\n");
      out.write("   width: 700px;\r\n");
      out.write("   margin: auto;\r\n");
      out.write("   list-style: none;\r\n");
      out.write("  }\r\n");
      out.write("  /*각 항목에 대한 가로배치 */\r\n");
      out.write("  ul li{\r\n");
      out.write("   float: left;\r\n");
      out.write("  }\r\n");
      out.write("  ul:after{\r\n");
      out.write("   content: '';\r\n");
      out.write("   display: block;\r\n");
      out.write("   float: none;\r\n");
      out.write("   clear: both;\r\n");
      out.write("  }\r\n");
      out.write("  /*이미지 테두리 제거, 여백지정*/\r\n");
      out.write("  ul li img{\r\n");
      out.write("   border: 0;\r\n");
      out.write("   margin: 10px;\r\n");
      out.write("  }\r\n");
      out.write("  /*배경 레이어의 위치, 크기, 투명도 지정: 기본적으로 표시하지 않도록 설정*/\r\n");
      out.write("  div#glayLayer{\r\n");
      out.write("    display: none;\r\n");
      out.write("    position: fixed;\r\n");
      out.write("    left: 0; top: 0;\r\n");
      out.write("    height: 100%; width: 100%;\r\n");
      out.write("    background: black;\r\n");
      out.write("    filter: alpha(opacity=60);\r\n");
      out.write("    opacity: 0.60;\r\n");
      out.write("  }\r\n");
      out.write("  /*이미지가 표시될 레이어를 화면 중앙에 배치 : 기본적으로 표시되지 않도록 설정*/\r\n");
      out.write("  div#overLayer{\r\n");
      out.write("    display: none;\r\n");
      out.write("    position: fixed;\r\n");
      out.write("    top: 50%; left: 50%;\r\n");
      out.write("    margin-top: -244px;\r\n");
      out.write("    margin-left: -325px;\r\n");
      out.write("  }\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!-- 화면에 표시될 원본 보기 영역: 기본적으로 숨겨진 상태 -->\r\n");
      out.write("<div id=\"glayLayer\"></div><div id=\"overLayer\"></div>\r\n");
      out.write("<!-- 이미지 목록 -->\r\n");
      out.write("<ul>\r\n");
      out.write("  <li><a href=\"img/photo1.jpg\" class=\"model\">\r\n");
      out.write("    <img alt=\"샹드리아\" src=\"img/photo1_thum.jpg\">  \r\n");
      out.write("  </a></li>\r\n");
      out.write("  <li><a href=\"img/photo2.jpg\" class=\"model\">\r\n");
      out.write("    <img alt=\"장미\" src=\"img/photo2_thum.jpg\">  \r\n");
      out.write("  </a></li>\r\n");
      out.write("  <li><a href=\"img/photo3.jpg\" class=\"model\">\r\n");
      out.write("    <img alt=\"바다\" src=\"img/photo3_thum.jpg\">  \r\n");
      out.write("  </a></li>\r\n");
      out.write("  <li><a href=\"img/photo4.jpg\" class=\"model\">\r\n");
      out.write("    <img alt=\"문\" src=\"img/photo4_thum.jpg\">  \r\n");
      out.write("  </a></li>\r\n");
      out.write("  <li><a href=\"img/photo5.jpg\" class=\"model\">\r\n");
      out.write("    <img alt=\"바다\" src=\"img/photo5_thum.jpg\">  \r\n");
      out.write("  </a></li>\r\n");
      out.write("  <li><a href=\"img/photo6.jpg\" class=\"model\">\r\n");
      out.write("    <img alt=\"꽃\" src=\"img/photo6_thum.jpg\">  \r\n");
      out.write("  </a></li>\r\n");
      out.write("  <li><a href=\"img/photo7.jpg\" class=\"model\">\r\n");
      out.write("    <img alt=\"하늘\" src=\"img/photo7_thum.jpg\">  \r\n");
      out.write("  </a></li>\r\n");
      out.write("  <li><a href=\"img/photo8.jpg\" class=\"model\">\r\n");
      out.write("    <img alt=\"건물\" src=\"img/photo8_thum.jpg\">  \r\n");
      out.write("  </a></li>\r\n");
      out.write("</ul>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
